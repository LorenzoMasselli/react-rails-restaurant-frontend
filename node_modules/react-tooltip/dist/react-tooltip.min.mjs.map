{"version":3,"file":"react-tooltip.min.mjs","sources":["../src/utils/handle-style.ts","../src/utils/debounce.ts","../src/components/TooltipProvider/TooltipProvider.tsx","../src/components/TooltipProvider/TooltipWrapper.tsx","../src/utils/use-isomorphic-layout-effect.ts","../src/utils/get-scroll-parent.ts","../src/utils/compute-positions.ts","../src/components/Tooltip/Tooltip.tsx","../src/utils/css-time-to-ms.ts","../src/components/TooltipContent/TooltipContent.tsx","../src/utils/css-supports.ts","../src/components/TooltipController/TooltipController.tsx","../src/index.tsx"],"sourcesContent":["// This is the ID for the core styles of ReactTooltip\nconst REACT_TOOLTIP_CORE_STYLES_ID = 'react-tooltip-core-styles'\n// This is the ID for the visual styles of ReactTooltip\nconst REACT_TOOLTIP_BASE_STYLES_ID = 'react-tooltip-base-styles'\n\nconst injected = {\n  core: false,\n  base: false,\n}\n\nfunction injectStyle({\n  css,\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n  type = 'base',\n  ref,\n}: {\n  css: string\n  id?: string\n  type?: 'core' | 'base'\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref?: any\n}) {\n  if (!css || typeof document === 'undefined' || injected[type]) {\n    return\n  }\n\n  if (\n    type === 'core' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_CORE_STYLES\n  ) {\n    return\n  }\n\n  if (\n    type !== 'base' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_BASE_STYLES\n  ) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  if (!ref) {\n    // eslint-disable-next-line no-param-reassign\n    ref = {}\n  }\n  const { insertAt } = ref\n\n  if (document.getElementById(id)) {\n    // this should never happen because of `injected[type]`\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[react-tooltip] Element with id '${id}' already exists. Call \\`removeStyle()\\` first`,\n      )\n    }\n    return\n  }\n\n  const head = document.head || document.getElementsByTagName('head')[0]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const style: any = document.createElement('style')\n  style.id = id\n  style.type = 'text/css'\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild)\n    } else {\n      head.appendChild(style)\n    }\n  } else {\n    head.appendChild(style)\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css\n  } else {\n    style.appendChild(document.createTextNode(css))\n  }\n\n  injected[type] = true\n}\n\n/**\n * @deprecated Use the `disableStyleInjection` tooltip prop instead.\n * See https://react-tooltip.com/docs/examples/styling#disabling-reacttooltip-css\n */\nfunction removeStyle({\n  type = 'base',\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n}: {\n  type?: 'core' | 'base'\n  id?: string\n} = {}) {\n  if (!injected[type]) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  const style = document.getElementById(id)\n  if (style?.tagName === 'style') {\n    style?.remove()\n  } else if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[react-tooltip] Failed to remove 'style' element with id '${id}'. Call \\`injectStyle()\\` first`,\n    )\n  }\n\n  injected[type] = false\n}\n\nexport { injectStyle, removeStyle }\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * This function debounce the received function\n * @param { function } \tfunc\t\t\t\tFunction to be debounced\n * @param { number } \t\twait\t\t\t\tTime to wait before execut the function\n * @param { boolean } \timmediate\t\tParam to define if the function will be executed immediately\n */\nconst debounce = (func: (...args: any[]) => void, wait?: number, immediate?: boolean) => {\n  let timeout: NodeJS.Timeout | null = null\n\n  return function debounced(this: typeof func, ...args: any[]) {\n    const later = () => {\n      timeout = null\n      if (!immediate) {\n        func.apply(this, args)\n      }\n    }\n\n    if (immediate && !timeout) {\n      /**\n       * there's not need to clear the timeout\n       * since we expect it to resolve and set `timeout = null`\n       */\n      func.apply(this, args)\n      timeout = setTimeout(later, wait)\n    }\n\n    if (!immediate) {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n      timeout = setTimeout(later, wait)\n    }\n  }\n}\n\nexport default debounce\n","import React, {\n  createContext,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nimport type {\n  AnchorRef,\n  TooltipContextData,\n  TooltipContextDataWrapper,\n} from './TooltipProviderTypes'\n\nconst DEFAULT_TOOLTIP_ID = 'DEFAULT_TOOLTIP_ID'\nconst DEFAULT_CONTEXT_DATA: TooltipContextData = {\n  anchorRefs: new Set(),\n  activeAnchor: { current: null },\n  attach: () => {\n    /* attach anchor element */\n  },\n  detach: () => {\n    /* detach anchor element */\n  },\n  setActiveAnchor: () => {\n    /* set active anchor */\n  },\n}\n\nconst DEFAULT_CONTEXT_DATA_WRAPPER: TooltipContextDataWrapper = {\n  getTooltipData: () => DEFAULT_CONTEXT_DATA,\n}\n\nconst TooltipContext = createContext<TooltipContextDataWrapper>(DEFAULT_CONTEXT_DATA_WRAPPER)\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipProvider: React.FC<PropsWithChildren<void>> = ({ children }) => {\n  const [anchorRefMap, setAnchorRefMap] = useState<Record<string, Set<AnchorRef>>>({\n    [DEFAULT_TOOLTIP_ID]: new Set(),\n  })\n  const [activeAnchorMap, setActiveAnchorMap] = useState<Record<string, AnchorRef>>({\n    [DEFAULT_TOOLTIP_ID]: { current: null },\n  })\n\n  const attach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId] ?? new Set()\n      refs.forEach((ref) => tooltipRefs.add(ref))\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: new Set(tooltipRefs) }\n    })\n  }\n\n  const detach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId]\n      if (!tooltipRefs) {\n        // tooltip not found\n        // maybe thow error?\n        return oldMap\n      }\n      refs.forEach((ref) => tooltipRefs.delete(ref))\n      // create new object to trigger re-render\n      return { ...oldMap }\n    })\n  }\n\n  const setActiveAnchor = (tooltipId: string, ref: React.RefObject<HTMLElement>) => {\n    setActiveAnchorMap((oldMap) => {\n      if (oldMap[tooltipId]?.current === ref.current) {\n        return oldMap\n      }\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: ref }\n    })\n  }\n\n  const getTooltipData = useCallback(\n    (tooltipId = DEFAULT_TOOLTIP_ID) => ({\n      anchorRefs: anchorRefMap[tooltipId] ?? new Set(),\n      activeAnchor: activeAnchorMap[tooltipId] ?? { current: null },\n      attach: (...refs: AnchorRef[]) => attach(tooltipId, ...refs),\n      detach: (...refs: AnchorRef[]) => detach(tooltipId, ...refs),\n      setActiveAnchor: (ref: AnchorRef) => setActiveAnchor(tooltipId, ref),\n    }),\n    [anchorRefMap, activeAnchorMap, attach, detach],\n  )\n\n  const context = useMemo(() => {\n    return {\n      getTooltipData,\n    }\n  }, [getTooltipData])\n\n  return <TooltipContext.Provider value={context}>{children}</TooltipContext.Provider>\n}\n\nexport function useTooltip(tooltipId = DEFAULT_TOOLTIP_ID) {\n  return useContext(TooltipContext).getTooltipData(tooltipId)\n}\n\nexport default TooltipProvider\n","import React, { useEffect, useRef } from 'react'\nimport classNames from 'classnames'\nimport { useTooltip } from './TooltipProvider'\nimport type { ITooltipWrapper } from './TooltipProviderTypes'\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipWrapper = ({\n  tooltipId,\n  children,\n  className,\n  place,\n  content,\n  html,\n  variant,\n  offset,\n  wrapper,\n  events,\n  positionStrategy,\n  delayShow,\n  delayHide,\n}: ITooltipWrapper) => {\n  const { attach, detach } = useTooltip(tooltipId)\n  const anchorRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    attach(anchorRef)\n    return () => {\n      detach(anchorRef)\n    }\n  }, [])\n\n  return (\n    <span\n      ref={anchorRef}\n      className={classNames('react-tooltip-wrapper', className)}\n      data-tooltip-place={place}\n      data-tooltip-content={content}\n      data-tooltip-html={html}\n      data-tooltip-variant={variant}\n      data-tooltip-offset={offset}\n      data-tooltip-wrapper={wrapper}\n      data-tooltip-events={events}\n      data-tooltip-position-strategy={positionStrategy}\n      data-tooltip-delay-show={delayShow}\n      data-tooltip-delay-hide={delayHide}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport default TooltipWrapper\n","import { useLayoutEffect, useEffect } from 'react'\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","const isScrollable = (node: Element) => {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return false\n  }\n  const style = getComputedStyle(node)\n  return ['overflow', 'overflow-x', 'overflow-y'].some((propertyName) => {\n    const value = style.getPropertyValue(propertyName)\n    return value === 'auto' || value === 'scroll'\n  })\n}\n\nexport const getScrollParent = (node: Element | null) => {\n  if (!node) {\n    return null\n  }\n  let currentParent = node.parentElement\n  while (currentParent) {\n    if (isScrollable(currentParent)) {\n      return currentParent\n    }\n    currentParent = currentParent.parentElement\n  }\n  return document.scrollingElement || document.documentElement\n}\n","import { computePosition, offset, shift, arrow, flip } from '@floating-ui/dom'\nimport type { IComputePositions } from './compute-positions-types'\n\nexport const computeTooltipPosition = async ({\n  elementReference = null,\n  tooltipReference = null,\n  tooltipArrowReference = null,\n  place = 'top',\n  offset: offsetValue = 10,\n  strategy = 'absolute',\n  middlewares = [\n    offset(Number(offsetValue)),\n    flip({\n      fallbackAxisSideDirection: 'start',\n    }),\n    shift({ padding: 5 }),\n  ],\n  border,\n}: IComputePositions) => {\n  if (!elementReference) {\n    // elementReference can be null or undefined and we will not compute the position\n    // eslint-disable-next-line no-console\n    // console.error('The reference element for tooltip was not defined: ', elementReference)\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  if (tooltipReference === null) {\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  const middleware = middlewares\n\n  if (tooltipArrowReference) {\n    middleware.push(arrow({ element: tooltipArrowReference as HTMLElement, padding: 5 }))\n\n    return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n      placement: place,\n      strategy,\n      middleware,\n    }).then(({ x, y, placement, middlewareData }) => {\n      const styles = { left: `${x}px`, top: `${y}px`, border }\n\n      const { x: arrowX, y: arrowY } = middlewareData.arrow ?? { x: 0, y: 0 }\n\n      const staticSide =\n        {\n          top: 'bottom',\n          right: 'left',\n          bottom: 'top',\n          left: 'right',\n        }[placement.split('-')[0]] ?? 'bottom'\n\n      const borderSide = border && {\n        borderBottom: border,\n        borderRight: border,\n      }\n\n      let borderWidth = 0\n      if (border) {\n        const match = `${border}`.match(/(\\d+)px/)\n        if (match?.[1]) {\n          borderWidth = Number(match[1])\n        } else {\n          /**\n           * this means `border` was set without `width`, or non-px value\n           */\n          borderWidth = 1\n        }\n      }\n\n      const arrowStyle = {\n        left: arrowX != null ? `${arrowX}px` : '',\n        top: arrowY != null ? `${arrowY}px` : '',\n        right: '',\n        bottom: '',\n        ...borderSide,\n        [staticSide]: `-${4 + borderWidth}px`,\n      }\n\n      return { tooltipStyles: styles, tooltipArrowStyles: arrowStyle, place: placement }\n    })\n  }\n\n  return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n    placement: 'bottom',\n    strategy,\n    middleware,\n  }).then(({ x, y, placement }) => {\n    const styles = { left: `${x}px`, top: `${y}px` }\n\n    return { tooltipStyles: styles, tooltipArrowStyles: {}, place: placement }\n  })\n}\n","import React, { useEffect, useState, useRef, useCallback, useImperativeHandle } from 'react'\nimport { autoUpdate } from '@floating-ui/dom'\nimport classNames from 'classnames'\nimport debounce from 'utils/debounce'\nimport { useTooltip } from 'components/TooltipProvider'\nimport useIsomorphicLayoutEffect from 'utils/use-isomorphic-layout-effect'\nimport { getScrollParent } from 'utils/get-scroll-parent'\nimport { computeTooltipPosition } from 'utils/compute-positions'\nimport { cssTimeToMs } from 'utils/css-time-to-ms'\nimport coreStyles from './core-styles.module.css'\nimport styles from './styles.module.css'\nimport type {\n  AnchorCloseEvents,\n  AnchorOpenEvents,\n  GlobalCloseEvents,\n  IPosition,\n  ITooltip,\n  PlacesType,\n  TooltipImperativeOpenOptions,\n} from './TooltipTypes'\n\nconst Tooltip = ({\n  // props\n  forwardRef,\n  id,\n  className,\n  classNameArrow,\n  variant = 'dark',\n  anchorId,\n  anchorSelect,\n  place = 'top',\n  offset = 10,\n  events = ['hover'],\n  openOnClick = false,\n  positionStrategy = 'absolute',\n  middlewares,\n  wrapper: WrapperElement,\n  delayShow = 0,\n  delayHide = 0,\n  float = false,\n  hidden = false,\n  noArrow = false,\n  clickable = false,\n  closeOnEsc = false,\n  closeOnScroll = false,\n  closeOnResize = false,\n  openEvents,\n  closeEvents,\n  globalCloseEvents,\n  imperativeModeOnly,\n  style: externalStyles,\n  position,\n  afterShow,\n  afterHide,\n  // props handled by controller\n  content,\n  contentWrapperRef,\n  isOpen,\n  setIsOpen,\n  activeAnchor,\n  setActiveAnchor,\n  border,\n  opacity,\n  arrowColor,\n  role = 'tooltip',\n}: ITooltip) => {\n  const tooltipRef = useRef<HTMLElement>(null)\n  const tooltipArrowRef = useRef<HTMLElement>(null)\n  const tooltipShowDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const tooltipHideDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const missedTransitionTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const [actualPlacement, setActualPlacement] = useState(place)\n  const [inlineStyles, setInlineStyles] = useState({})\n  const [inlineArrowStyles, setInlineArrowStyles] = useState({})\n  const [show, setShow] = useState(false)\n  const [rendered, setRendered] = useState(false)\n  const [imperativeOptions, setImperativeOptions] = useState<TooltipImperativeOpenOptions | null>(\n    null,\n  )\n  const wasShowing = useRef(false)\n  const lastFloatPosition = useRef<IPosition | null>(null)\n  /**\n   * @todo Remove this in a future version (provider/wrapper method is deprecated)\n   */\n  const { anchorRefs, setActiveAnchor: setProviderActiveAnchor } = useTooltip(id)\n  const hoveringTooltip = useRef(false)\n  const [anchorsBySelect, setAnchorsBySelect] = useState<HTMLElement[]>([])\n  const mounted = useRef(false)\n\n  /**\n   * @todo Update when deprecated stuff gets removed.\n   */\n  const shouldOpenOnClick = openOnClick || events.includes('click')\n  const hasClickEvent =\n    shouldOpenOnClick || openEvents?.click || openEvents?.dblclick || openEvents?.mousedown\n  const actualOpenEvents: AnchorOpenEvents = openEvents\n    ? { ...openEvents }\n    : {\n        mouseenter: true,\n        focus: true,\n        click: false,\n        dblclick: false,\n        mousedown: false,\n      }\n  if (!openEvents && shouldOpenOnClick) {\n    Object.assign(actualOpenEvents, {\n      mouseenter: false,\n      focus: false,\n      click: true,\n    })\n  }\n  const actualCloseEvents: AnchorCloseEvents = closeEvents\n    ? { ...closeEvents }\n    : {\n        mouseleave: true,\n        blur: true,\n        click: false,\n        dblclick: false,\n        mouseup: false,\n      }\n  if (!closeEvents && shouldOpenOnClick) {\n    Object.assign(actualCloseEvents, {\n      mouseleave: false,\n      blur: false,\n    })\n  }\n  const actualGlobalCloseEvents: GlobalCloseEvents = globalCloseEvents\n    ? { ...globalCloseEvents }\n    : {\n        escape: closeOnEsc || false,\n        scroll: closeOnScroll || false,\n        resize: closeOnResize || false,\n        clickOutsideAnchor: hasClickEvent || false,\n      }\n\n  if (imperativeModeOnly) {\n    Object.assign(actualOpenEvents, {\n      mouseenter: false,\n      focus: false,\n      click: false,\n      dblclick: false,\n      mousedown: false,\n    })\n    Object.assign(actualCloseEvents, {\n      mouseleave: false,\n      blur: false,\n      click: false,\n      dblclick: false,\n      mouseup: false,\n    })\n    Object.assign(actualGlobalCloseEvents, {\n      escape: false,\n      scroll: false,\n      resize: false,\n      clickOutsideAnchor: false,\n    })\n  }\n\n  /**\n   * useLayoutEffect runs before useEffect,\n   * but should be used carefully because of caveats\n   * https://beta.reactjs.org/reference/react/useLayoutEffect#caveats\n   */\n  useIsomorphicLayoutEffect(() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  const handleShow = (value: boolean) => {\n    if (!mounted.current) {\n      return\n    }\n    if (value) {\n      setRendered(true)\n    }\n    /**\n     * wait for the component to render and calculate position\n     * before actually showing\n     */\n    setTimeout(() => {\n      if (!mounted.current) {\n        return\n      }\n      setIsOpen?.(value)\n      if (isOpen === undefined) {\n        setShow(value)\n      }\n    }, 10)\n  }\n\n  /**\n   * this replicates the effect from `handleShow()`\n   * when `isOpen` is changed from outside\n   */\n  useEffect(() => {\n    if (isOpen === undefined) {\n      return () => null\n    }\n    if (isOpen) {\n      setRendered(true)\n    }\n    const timeout = setTimeout(() => {\n      setShow(isOpen)\n    }, 10)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    if (show === wasShowing.current) {\n      return\n    }\n    if (missedTransitionTimerRef.current) {\n      clearTimeout(missedTransitionTimerRef.current)\n    }\n    wasShowing.current = show\n    if (show) {\n      afterShow?.()\n    } else {\n      /**\n       * see `onTransitionEnd` on tooltip wrapper\n       */\n      const style = getComputedStyle(document.body)\n      const transitionShowDelay = cssTimeToMs(style.getPropertyValue('--rt-transition-show-delay'))\n      missedTransitionTimerRef.current = setTimeout(() => {\n        /**\n         * if the tooltip switches from `show === true` to `show === false` too fast\n         * the transition never runs, so `onTransitionEnd` callback never gets fired\n         */\n        setRendered(false)\n        setImperativeOptions(null)\n        afterHide?.()\n        // +25ms just to make sure `onTransitionEnd` (if it gets fired) has time to run\n      }, transitionShowDelay + 25)\n    }\n  }, [show])\n\n  const handleShowTooltipDelayed = (delay = delayShow) => {\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n\n    tooltipShowDelayTimerRef.current = setTimeout(() => {\n      handleShow(true)\n    }, delay)\n  }\n\n  const handleHideTooltipDelayed = (delay = delayHide) => {\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n\n    tooltipHideDelayTimerRef.current = setTimeout(() => {\n      if (hoveringTooltip.current) {\n        return\n      }\n      handleShow(false)\n    }, delay)\n  }\n\n  const handleShowTooltip = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const target = (event.currentTarget ?? event.target) as HTMLElement | null\n    if (!target?.isConnected) {\n      /**\n       * this happens when the target is removed from the DOM\n       * at the same time the tooltip gets triggered\n       */\n      setActiveAnchor(null)\n      setProviderActiveAnchor({ current: null })\n      return\n    }\n    if (delayShow) {\n      handleShowTooltipDelayed()\n    } else {\n      handleShow(true)\n    }\n    setActiveAnchor(target)\n    setProviderActiveAnchor({ current: target })\n\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n  }\n\n  const handleHideTooltip = () => {\n    if (clickable) {\n      // allow time for the mouse to reach the tooltip, in case there's a gap\n      handleHideTooltipDelayed(delayHide || 100)\n    } else if (delayHide) {\n      handleHideTooltipDelayed()\n    } else {\n      handleShow(false)\n    }\n\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  const handleTooltipPosition = ({ x, y }: IPosition) => {\n    const virtualElement = {\n      getBoundingClientRect() {\n        return {\n          x,\n          y,\n          width: 0,\n          height: 0,\n          top: y,\n          left: x,\n          right: x,\n          bottom: y,\n        }\n      },\n    } as Element\n    computeTooltipPosition({\n      place: imperativeOptions?.place ?? place,\n      offset,\n      elementReference: virtualElement,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      if (Object.keys(computedStylesData.tooltipStyles).length) {\n        setInlineStyles(computedStylesData.tooltipStyles)\n      }\n      if (Object.keys(computedStylesData.tooltipArrowStyles).length) {\n        setInlineArrowStyles(computedStylesData.tooltipArrowStyles)\n      }\n      setActualPlacement(computedStylesData.place as PlacesType)\n    })\n  }\n\n  const handleMouseMove = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const mouseEvent = event as MouseEvent\n    const mousePosition = {\n      x: mouseEvent.clientX,\n      y: mouseEvent.clientY,\n    }\n    handleTooltipPosition(mousePosition)\n    lastFloatPosition.current = mousePosition\n  }\n\n  const handleClickOutsideAnchors = (event: MouseEvent) => {\n    if (!show) {\n      return\n    }\n    const target = event.target as HTMLElement\n    if (tooltipRef.current?.contains(target)) {\n      return\n    }\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [anchorById, ...anchorsBySelect]\n    if (anchors.some((anchor) => anchor?.contains(target))) {\n      return\n    }\n    handleShow(false)\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  // debounce handler to prevent call twice when\n  // mouse enter and focus events being triggered toggether\n  const debouncedHandleShowTooltip = debounce(handleShowTooltip, 50, true)\n  const debouncedHandleHideTooltip = debounce(handleHideTooltip, 50, true)\n  const updateTooltipPosition = useCallback(() => {\n    const actualPosition = imperativeOptions?.position ?? position\n    if (actualPosition) {\n      // if `position` is set, override regular and `float` positioning\n      handleTooltipPosition(actualPosition)\n      return\n    }\n\n    if (float) {\n      if (lastFloatPosition.current) {\n        /*\n          Without this, changes to `content`, `place`, `offset`, ..., will only\n          trigger a position calculation after a `mousemove` event.\n\n          To see why this matters, comment this line, run `yarn dev` and click the\n          \"Hover me!\" anchor.\n        */\n        handleTooltipPosition(lastFloatPosition.current)\n      }\n      // if `float` is set, override regular positioning\n      return\n    }\n\n    if (!activeAnchor?.isConnected) {\n      return\n    }\n\n    computeTooltipPosition({\n      place: imperativeOptions?.place ?? place,\n      offset,\n      elementReference: activeAnchor,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      if (!mounted.current) {\n        // invalidate computed positions after remount\n        return\n      }\n      if (Object.keys(computedStylesData.tooltipStyles).length) {\n        setInlineStyles(computedStylesData.tooltipStyles)\n      }\n      if (Object.keys(computedStylesData.tooltipArrowStyles).length) {\n        setInlineArrowStyles(computedStylesData.tooltipArrowStyles)\n      }\n      setActualPlacement(computedStylesData.place as PlacesType)\n    })\n  }, [\n    show,\n    activeAnchor,\n    content,\n    externalStyles,\n    place,\n    imperativeOptions?.place,\n    offset,\n    positionStrategy,\n    position,\n    imperativeOptions?.position,\n    float,\n  ])\n\n  useEffect(() => {\n    const elementRefs = new Set(anchorRefs)\n\n    anchorsBySelect.forEach((anchor) => {\n      elementRefs.add({ current: anchor })\n    })\n\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    if (anchorById) {\n      elementRefs.add({ current: anchorById })\n    }\n\n    const handleScrollResize = () => {\n      handleShow(false)\n    }\n\n    const anchorScrollParent = getScrollParent(activeAnchor)\n    const tooltipScrollParent = getScrollParent(tooltipRef.current)\n\n    if (actualGlobalCloseEvents.scroll) {\n      window.addEventListener('scroll', handleScrollResize)\n      anchorScrollParent?.addEventListener('scroll', handleScrollResize)\n      tooltipScrollParent?.addEventListener('scroll', handleScrollResize)\n    }\n    let updateTooltipCleanup: null | (() => void) = null\n    if (actualGlobalCloseEvents.resize) {\n      window.addEventListener('resize', handleScrollResize)\n    } else if (activeAnchor && tooltipRef.current) {\n      updateTooltipCleanup = autoUpdate(\n        activeAnchor as HTMLElement,\n        tooltipRef.current as HTMLElement,\n        updateTooltipPosition,\n        {\n          ancestorResize: true,\n          elementResize: true,\n          layoutShift: true,\n        },\n      )\n    }\n\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key !== 'Escape') {\n        return\n      }\n      handleShow(false)\n    }\n    if (actualGlobalCloseEvents.escape) {\n      window.addEventListener('keydown', handleEsc)\n    }\n\n    if (actualGlobalCloseEvents.clickOutsideAnchor) {\n      window.addEventListener('click', handleClickOutsideAnchors)\n    }\n\n    const enabledEvents: { event: string; listener: (event?: Event) => void }[] = []\n\n    const handleClickOpenTooltipAnchor = (event?: Event) => {\n      if (show && event?.target === activeAnchor) {\n        /**\n         * ignore clicking the anchor that was used to open the tooltip.\n         * this avoids conflict with the click close event.\n         */\n        return\n      }\n      handleShowTooltip(event)\n    }\n    const handleClickCloseTooltipAnchor = (event?: Event) => {\n      if (!show || event?.target !== activeAnchor) {\n        /**\n         * ignore clicking the anchor that was NOT used to open the tooltip.\n         * this avoids closing the tooltip when clicking on a new anchor with the tooltip already open.\n         */\n        return\n      }\n      handleHideTooltip()\n    }\n\n    const regularEvents = ['mouseenter', 'mouseleave', 'focus', 'blur']\n    const clickEvents = ['click', 'dblclick', 'mousedown', 'mouseup']\n\n    Object.entries(actualOpenEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleShowTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickOpenTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    Object.entries(actualCloseEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleHideTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickCloseTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    if (float) {\n      enabledEvents.push({\n        event: 'mousemove',\n        listener: handleMouseMove,\n      })\n    }\n\n    const handleMouseEnterTooltip = () => {\n      hoveringTooltip.current = true\n    }\n    const handleMouseLeaveTooltip = () => {\n      hoveringTooltip.current = false\n      handleHideTooltip()\n    }\n\n    if (clickable && !hasClickEvent) {\n      // used to keep the tooltip open when hovering content.\n      // not needed if using click events.\n      tooltipRef.current?.addEventListener('mouseenter', handleMouseEnterTooltip)\n      tooltipRef.current?.addEventListener('mouseleave', handleMouseLeaveTooltip)\n    }\n\n    enabledEvents.forEach(({ event, listener }) => {\n      elementRefs.forEach((ref) => {\n        ref.current?.addEventListener(event, listener)\n      })\n    })\n\n    return () => {\n      if (actualGlobalCloseEvents.scroll) {\n        window.removeEventListener('scroll', handleScrollResize)\n        anchorScrollParent?.removeEventListener('scroll', handleScrollResize)\n        tooltipScrollParent?.removeEventListener('scroll', handleScrollResize)\n      }\n      if (actualGlobalCloseEvents.resize) {\n        window.removeEventListener('resize', handleScrollResize)\n      } else {\n        updateTooltipCleanup?.()\n      }\n      if (actualGlobalCloseEvents.clickOutsideAnchor) {\n        window.removeEventListener('click', handleClickOutsideAnchors)\n      }\n      if (actualGlobalCloseEvents.escape) {\n        window.removeEventListener('keydown', handleEsc)\n      }\n      if (clickable && !hasClickEvent) {\n        tooltipRef.current?.removeEventListener('mouseenter', handleMouseEnterTooltip)\n        tooltipRef.current?.removeEventListener('mouseleave', handleMouseLeaveTooltip)\n      }\n      enabledEvents.forEach(({ event, listener }) => {\n        elementRefs.forEach((ref) => {\n          ref.current?.removeEventListener(event, listener)\n        })\n      })\n    }\n    /**\n     * rendered is also a dependency to ensure anchor observers are re-registered\n     * since `tooltipRef` becomes stale after removing/adding the tooltip to the DOM\n     */\n  }, [\n    activeAnchor,\n    updateTooltipPosition,\n    rendered,\n    anchorRefs,\n    anchorsBySelect,\n    // the effect uses the `actual*Events` objects, but this should work\n    openEvents,\n    closeEvents,\n    globalCloseEvents,\n    shouldOpenOnClick,\n  ])\n\n  useEffect(() => {\n    let selector = imperativeOptions?.anchorSelect ?? anchorSelect ?? ''\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    const documentObserverCallback: MutationCallback = (mutationList) => {\n      const newAnchors: HTMLElement[] = []\n      const removedAnchors: HTMLElement[] = []\n      mutationList.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-tooltip-id') {\n          const newId = (mutation.target as HTMLElement).getAttribute('data-tooltip-id')\n          if (newId === id) {\n            newAnchors.push(mutation.target as HTMLElement)\n          }\n        }\n        if (mutation.type !== 'childList') {\n          return\n        }\n        if (activeAnchor) {\n          const elements = [...mutation.removedNodes].filter((node) => node.nodeType === 1)\n          if (selector) {\n            try {\n              removedAnchors.push(\n                // the element itself is an anchor\n                ...(elements.filter((element) =>\n                  (element as HTMLElement).matches(selector),\n                ) as HTMLElement[]),\n              )\n              removedAnchors.push(\n                // the element has children which are anchors\n                ...elements.flatMap(\n                  (element) =>\n                    [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n                ),\n              )\n            } catch {\n              /**\n               * invalid CSS selector.\n               * already warned on tooltip controller\n               */\n            }\n          }\n          elements.some((node) => {\n            if (node?.contains?.(activeAnchor)) {\n              setRendered(false)\n              handleShow(false)\n              setActiveAnchor(null)\n              if (tooltipShowDelayTimerRef.current) {\n                clearTimeout(tooltipShowDelayTimerRef.current)\n              }\n              if (tooltipHideDelayTimerRef.current) {\n                clearTimeout(tooltipHideDelayTimerRef.current)\n              }\n              return true\n            }\n            return false\n          })\n        }\n        if (!selector) {\n          return\n        }\n        try {\n          const elements = [...mutation.addedNodes].filter((node) => node.nodeType === 1)\n          newAnchors.push(\n            // the element itself is an anchor\n            ...(elements.filter((element) =>\n              (element as HTMLElement).matches(selector),\n            ) as HTMLElement[]),\n          )\n          newAnchors.push(\n            // the element has children which are anchors\n            ...elements.flatMap(\n              (element) =>\n                [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n            ),\n          )\n        } catch {\n          /**\n           * invalid CSS selector.\n           * already warned on tooltip controller\n           */\n        }\n      })\n      if (newAnchors.length || removedAnchors.length) {\n        setAnchorsBySelect((anchors) => [\n          ...anchors.filter((anchor) => !removedAnchors.includes(anchor)),\n          ...newAnchors,\n        ])\n      }\n    }\n    const documentObserver = new MutationObserver(documentObserverCallback)\n    // watch for anchor being removed from the DOM\n    documentObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-tooltip-id'],\n    })\n    return () => {\n      documentObserver.disconnect()\n    }\n  }, [id, anchorSelect, imperativeOptions?.anchorSelect, activeAnchor])\n\n  useEffect(() => {\n    updateTooltipPosition()\n  }, [updateTooltipPosition])\n\n  useEffect(() => {\n    if (!contentWrapperRef?.current) {\n      return () => null\n    }\n    const contentObserver = new ResizeObserver(() => {\n      setTimeout(() => updateTooltipPosition())\n    })\n    contentObserver.observe(contentWrapperRef.current)\n    return () => {\n      contentObserver.disconnect()\n    }\n  }, [content, contentWrapperRef?.current])\n\n  useEffect(() => {\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [...anchorsBySelect, anchorById]\n    if (!activeAnchor || !anchors.includes(activeAnchor)) {\n      /**\n       * if there is no active anchor,\n       * or if the current active anchor is not amongst the allowed ones,\n       * reset it\n       */\n      setActiveAnchor(anchorsBySelect[0] ?? anchorById)\n    }\n  }, [anchorId, anchorsBySelect, activeAnchor])\n\n  useEffect(() => {\n    return () => {\n      if (tooltipShowDelayTimerRef.current) {\n        clearTimeout(tooltipShowDelayTimerRef.current)\n      }\n      if (tooltipHideDelayTimerRef.current) {\n        clearTimeout(tooltipHideDelayTimerRef.current)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    let selector = imperativeOptions?.anchorSelect ?? anchorSelect\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    if (!selector) {\n      return\n    }\n    try {\n      const anchors = Array.from(document.querySelectorAll<HTMLElement>(selector))\n      setAnchorsBySelect(anchors)\n    } catch {\n      // warning was already issued in the controller\n      setAnchorsBySelect([])\n    }\n  }, [id, anchorSelect, imperativeOptions?.anchorSelect])\n\n  const actualContent = imperativeOptions?.content ?? content\n  const canShow = show && Object.keys(inlineStyles).length > 0\n\n  useImperativeHandle(forwardRef, () => ({\n    open: (options) => {\n      if (options?.anchorSelect) {\n        try {\n          document.querySelector(options.anchorSelect)\n        } catch {\n          if (!process.env.NODE_ENV || process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn(`[react-tooltip] \"${options.anchorSelect}\" is not a valid CSS selector`)\n          }\n          return\n        }\n      }\n      setImperativeOptions(options ?? null)\n      if (options?.delay) {\n        handleShowTooltipDelayed(options.delay)\n      } else {\n        handleShow(true)\n      }\n    },\n    close: (options) => {\n      if (options?.delay) {\n        handleHideTooltipDelayed(options.delay)\n      } else {\n        handleShow(false)\n      }\n    },\n    activeAnchor,\n    place: actualPlacement,\n    isOpen: Boolean(rendered && !hidden && actualContent && canShow),\n  }))\n\n  return rendered && !hidden && actualContent ? (\n    <WrapperElement\n      id={id}\n      role={role}\n      className={classNames(\n        'react-tooltip',\n        coreStyles['tooltip'],\n        styles['tooltip'],\n        styles[variant],\n        className,\n        `react-tooltip__place-${actualPlacement}`,\n        coreStyles[canShow ? 'show' : 'closing'],\n        canShow ? 'react-tooltip__show' : 'react-tooltip__closing',\n        positionStrategy === 'fixed' && coreStyles['fixed'],\n        clickable && coreStyles['clickable'],\n      )}\n      onTransitionEnd={(event: TransitionEvent) => {\n        if (missedTransitionTimerRef.current) {\n          clearTimeout(missedTransitionTimerRef.current)\n        }\n        if (show || event.propertyName !== 'opacity') {\n          return\n        }\n        setRendered(false)\n        setImperativeOptions(null)\n        afterHide?.()\n      }}\n      style={{\n        ...externalStyles,\n        ...inlineStyles,\n        opacity: opacity !== undefined && canShow ? opacity : undefined,\n      }}\n      ref={tooltipRef}\n    >\n      {actualContent}\n      <WrapperElement\n        className={classNames(\n          'react-tooltip-arrow',\n          coreStyles['arrow'],\n          styles['arrow'],\n          classNameArrow,\n          noArrow && coreStyles['noArrow'],\n        )}\n        style={{\n          ...inlineArrowStyles,\n          background: arrowColor\n            ? `linear-gradient(to right bottom, transparent 50%, ${arrowColor} 50%)`\n            : undefined,\n        }}\n        ref={tooltipArrowRef}\n      />\n    </WrapperElement>\n  ) : null\n}\n\nexport default Tooltip\n","export const cssTimeToMs = (time: string): number => {\n  const match = time.match(/^([\\d.]+)(m?s?)$/)\n  if (!match) {\n    return 0\n  }\n  const [, amount, unit] = match\n  if (unit !== 's' && unit !== 'ms') {\n    return 0\n  }\n  return Number(amount) * (unit === 'ms' ? 1 : 1000)\n}\n","/* eslint-disable react/no-danger */\nimport React from 'react'\nimport type { ITooltipContent } from './TooltipContentTypes'\n\nconst TooltipContent = ({ content }: ITooltipContent) => {\n  return <span dangerouslySetInnerHTML={{ __html: content }} />\n}\n\nexport default TooltipContent\n","const cssSupports = (property: string, value: string): boolean => {\n  const hasCssSupports = 'CSS' in window && 'supports' in window.CSS\n  return hasCssSupports ? window.CSS.supports(property, value) : true\n}\n\nexport default cssSupports\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Tooltip } from 'components/Tooltip'\nimport type {\n  EventsType,\n  PositionStrategy,\n  PlacesType,\n  VariantType,\n  WrapperType,\n  DataAttribute,\n  ITooltip,\n  ChildrenType,\n  TooltipRefProps,\n} from 'components/Tooltip/TooltipTypes'\nimport { useTooltip } from 'components/TooltipProvider'\nimport { TooltipContent } from 'components/TooltipContent'\nimport cssSupports from 'utils/css-supports'\nimport classNames from 'classnames'\nimport type { ITooltipController } from './TooltipControllerTypes'\n\nconst TooltipController = React.forwardRef<TooltipRefProps, ITooltipController>(\n  (\n    {\n      id,\n      anchorId,\n      anchorSelect,\n      content,\n      html,\n      render,\n      className,\n      classNameArrow,\n      variant = 'dark',\n      place = 'top',\n      offset = 10,\n      wrapper = 'div',\n      children = null,\n      events = ['hover'],\n      openOnClick = false,\n      positionStrategy = 'absolute',\n      middlewares,\n      delayShow = 0,\n      delayHide = 0,\n      float = false,\n      hidden = false,\n      noArrow = false,\n      clickable = false,\n      closeOnEsc = false,\n      closeOnScroll = false,\n      closeOnResize = false,\n      openEvents,\n      closeEvents,\n      globalCloseEvents,\n      imperativeModeOnly = false,\n      style,\n      position,\n      isOpen,\n      disableStyleInjection = false,\n      border,\n      opacity,\n      arrowColor,\n      setIsOpen,\n      afterShow,\n      afterHide,\n      role = 'tooltip',\n    }: ITooltipController,\n    ref,\n  ) => {\n    const [tooltipContent, setTooltipContent] = useState(content)\n    const [tooltipHtml, setTooltipHtml] = useState(html)\n    const [tooltipPlace, setTooltipPlace] = useState(place)\n    const [tooltipVariant, setTooltipVariant] = useState(variant)\n    const [tooltipOffset, setTooltipOffset] = useState(offset)\n    const [tooltipDelayShow, setTooltipDelayShow] = useState(delayShow)\n    const [tooltipDelayHide, setTooltipDelayHide] = useState(delayHide)\n    const [tooltipFloat, setTooltipFloat] = useState(float)\n    const [tooltipHidden, setTooltipHidden] = useState(hidden)\n    const [tooltipWrapper, setTooltipWrapper] = useState<WrapperType>(wrapper)\n    const [tooltipEvents, setTooltipEvents] = useState(events)\n    const [tooltipPositionStrategy, setTooltipPositionStrategy] = useState(positionStrategy)\n    const [tooltipClassName, setTooltipClassName] = useState<string | null>(null)\n    const [activeAnchor, setActiveAnchor] = useState<HTMLElement | null>(null)\n    const styleInjectionRef = useRef(disableStyleInjection)\n    /**\n     * @todo Remove this in a future version (provider/wrapper method is deprecated)\n     */\n    const { anchorRefs, activeAnchor: providerActiveAnchor } = useTooltip(id)\n\n    const getDataAttributesFromAnchorElement = (elementReference: HTMLElement) => {\n      const dataAttributes = elementReference?.getAttributeNames().reduce((acc, name) => {\n        if (name.startsWith('data-tooltip-')) {\n          const parsedAttribute = name.replace(/^data-tooltip-/, '') as DataAttribute\n          acc[parsedAttribute] = elementReference?.getAttribute(name) ?? null\n        }\n        return acc\n      }, {} as Record<DataAttribute, string | null>)\n\n      return dataAttributes\n    }\n\n    const applyAllDataAttributesFromAnchorElement = (\n      dataAttributes: Record<string, string | null>,\n    ) => {\n      const handleDataAttributes: Record<DataAttribute, (value: string | null) => void> = {\n        place: (value) => {\n          setTooltipPlace((value as PlacesType) ?? place)\n        },\n        content: (value) => {\n          setTooltipContent(value ?? content)\n        },\n        html: (value) => {\n          setTooltipHtml(value ?? html)\n        },\n        variant: (value) => {\n          setTooltipVariant((value as VariantType) ?? variant)\n        },\n        offset: (value) => {\n          setTooltipOffset(value === null ? offset : Number(value))\n        },\n        wrapper: (value) => {\n          setTooltipWrapper((value as WrapperType) ?? wrapper)\n        },\n        events: (value) => {\n          const parsed = value?.split(' ') as EventsType[]\n          setTooltipEvents(parsed ?? events)\n        },\n        'position-strategy': (value) => {\n          setTooltipPositionStrategy((value as PositionStrategy) ?? positionStrategy)\n        },\n        'delay-show': (value) => {\n          setTooltipDelayShow(value === null ? delayShow : Number(value))\n        },\n        'delay-hide': (value) => {\n          setTooltipDelayHide(value === null ? delayHide : Number(value))\n        },\n        float: (value) => {\n          setTooltipFloat(value === null ? float : value === 'true')\n        },\n        hidden: (value) => {\n          setTooltipHidden(value === null ? hidden : value === 'true')\n        },\n        'class-name': (value) => {\n          setTooltipClassName(value)\n        },\n      }\n      // reset unset data attributes to default values\n      // without this, data attributes from the last active anchor will still be used\n      Object.values(handleDataAttributes).forEach((handler) => handler(null))\n      Object.entries(dataAttributes).forEach(([key, value]) => {\n        handleDataAttributes[key as DataAttribute]?.(value)\n      })\n    }\n\n    useEffect(() => {\n      setTooltipContent(content)\n    }, [content])\n\n    useEffect(() => {\n      setTooltipHtml(html)\n    }, [html])\n\n    useEffect(() => {\n      setTooltipPlace(place)\n    }, [place])\n\n    useEffect(() => {\n      setTooltipVariant(variant)\n    }, [variant])\n\n    useEffect(() => {\n      setTooltipOffset(offset)\n    }, [offset])\n\n    useEffect(() => {\n      setTooltipDelayShow(delayShow)\n    }, [delayShow])\n\n    useEffect(() => {\n      setTooltipDelayHide(delayHide)\n    }, [delayHide])\n\n    useEffect(() => {\n      setTooltipFloat(float)\n    }, [float])\n\n    useEffect(() => {\n      setTooltipHidden(hidden)\n    }, [hidden])\n\n    useEffect(() => {\n      setTooltipPositionStrategy(positionStrategy)\n    }, [positionStrategy])\n\n    useEffect(() => {\n      if (styleInjectionRef.current === disableStyleInjection) {\n        return\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not change `disableStyleInjection` dynamically.')\n      }\n    }, [disableStyleInjection])\n\n    useEffect(() => {\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(\n          new CustomEvent('react-tooltip-inject-styles', {\n            detail: {\n              disableCore: disableStyleInjection === 'core',\n              disableBase: disableStyleInjection,\n            },\n          }),\n        )\n      }\n    }, [])\n\n    useEffect(() => {\n      const elementRefs = new Set(anchorRefs)\n\n      let selector = anchorSelect\n      if (!selector && id) {\n        selector = `[data-tooltip-id='${id}']`\n      }\n      if (selector) {\n        try {\n          const anchorsBySelect = document.querySelectorAll<HTMLElement>(selector)\n          anchorsBySelect.forEach((anchor) => {\n            elementRefs.add({ current: anchor })\n          })\n        } catch {\n          if (!process.env.NODE_ENV || process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn(`[react-tooltip] \"${selector}\" is not a valid CSS selector`)\n          }\n        }\n      }\n\n      const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n      if (anchorById) {\n        elementRefs.add({ current: anchorById })\n      }\n\n      if (!elementRefs.size) {\n        return () => null\n      }\n\n      const anchorElement = activeAnchor ?? anchorById ?? providerActiveAnchor.current\n\n      const observerCallback: MutationCallback = (mutationList) => {\n        mutationList.forEach((mutation) => {\n          if (\n            !anchorElement ||\n            mutation.type !== 'attributes' ||\n            !mutation.attributeName?.startsWith('data-tooltip-')\n          ) {\n            return\n          }\n          // make sure to get all set attributes, since all unset attributes are reset\n          const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n          applyAllDataAttributesFromAnchorElement(dataAttributes)\n        })\n      }\n\n      // Create an observer instance linked to the callback function\n      const observer = new MutationObserver(observerCallback)\n\n      // do not check for subtree and childrens, we only want to know attribute changes\n      // to stay watching `data-attributes-*` from anchor element\n      const observerConfig = { attributes: true, childList: false, subtree: false }\n\n      if (anchorElement) {\n        const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n        applyAllDataAttributesFromAnchorElement(dataAttributes)\n        // Start observing the target node for configured mutations\n        observer.observe(anchorElement, observerConfig)\n      }\n\n      return () => {\n        // Remove the observer when the tooltip is destroyed\n        observer.disconnect()\n      }\n    }, [anchorRefs, providerActiveAnchor, activeAnchor, anchorId, anchorSelect])\n\n    useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return\n      }\n      if (style?.border) {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not set `style.border`. Use `border` prop instead.')\n      }\n      if (border && !cssSupports('border', `${border}`)) {\n        // eslint-disable-next-line no-console\n        console.warn(`[react-tooltip] \"${border}\" is not a valid \\`border\\`.`)\n      }\n      if (style?.opacity) {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not set `style.opacity`. Use `opacity` prop instead.')\n      }\n      if (opacity && !cssSupports('opacity', `${opacity}`)) {\n        // eslint-disable-next-line no-console\n        console.warn(`[react-tooltip] \"${opacity}\" is not a valid \\`opacity\\`.`)\n      }\n    }, [])\n\n    /**\n     * content priority: children < render or content < html\n     * children should be lower priority so that it can be used as the \"default\" content\n     */\n    let renderedContent: ChildrenType = children\n    const contentWrapperRef = useRef<HTMLDivElement>(null)\n    if (render) {\n      const rendered = render({ content: tooltipContent ?? null, activeAnchor }) as React.ReactNode\n      renderedContent = rendered ? (\n        <div ref={contentWrapperRef} className=\"react-tooltip-content-wrapper\">\n          {rendered}\n        </div>\n      ) : null\n    } else if (tooltipContent) {\n      renderedContent = tooltipContent\n    }\n    if (tooltipHtml) {\n      renderedContent = <TooltipContent content={tooltipHtml} />\n    }\n\n    const props: ITooltip = {\n      forwardRef: ref,\n      id,\n      anchorId,\n      anchorSelect,\n      className: classNames(className, tooltipClassName),\n      classNameArrow,\n      content: renderedContent,\n      contentWrapperRef,\n      place: tooltipPlace,\n      variant: tooltipVariant,\n      offset: tooltipOffset,\n      wrapper: tooltipWrapper,\n      events: tooltipEvents,\n      openOnClick,\n      positionStrategy: tooltipPositionStrategy,\n      middlewares,\n      delayShow: tooltipDelayShow,\n      delayHide: tooltipDelayHide,\n      float: tooltipFloat,\n      hidden: tooltipHidden,\n      noArrow,\n      clickable,\n      closeOnEsc,\n      closeOnScroll,\n      closeOnResize,\n      openEvents,\n      closeEvents,\n      globalCloseEvents,\n      imperativeModeOnly,\n      style,\n      position,\n      isOpen,\n      border,\n      opacity,\n      arrowColor,\n      setIsOpen,\n      afterShow,\n      afterHide,\n      activeAnchor,\n      setActiveAnchor: (anchor: HTMLElement | null) => setActiveAnchor(anchor),\n      role,\n    }\n\n    return <Tooltip {...props} />\n  },\n)\n\nexport default TooltipController\n","import './tokens.css'\n\nimport { injectStyle } from 'utils/handle-style'\n\nimport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  IPosition,\n  Middleware,\n  TooltipRefProps,\n} from './components/Tooltip/TooltipTypes'\nimport type { ITooltipController } from './components/TooltipController/TooltipControllerTypes'\nimport type { ITooltipWrapper } from './components/TooltipProvider/TooltipProviderTypes'\n\n// those content will be replaced in build time with the `react-tooltip.css` builded content\nconst TooltipCoreStyles = 'react-tooltip-core-css-placeholder'\nconst TooltipStyles = 'react-tooltip-css-placeholder'\n\nif (typeof window !== 'undefined') {\n  window.addEventListener('react-tooltip-inject-styles', ((\n    event: CustomEvent<{ disableCore: boolean; disableBase: boolean }>,\n  ) => {\n    if (!event.detail.disableCore) {\n      injectStyle({ css: TooltipCoreStyles, type: 'core' })\n    }\n    if (!event.detail.disableBase) {\n      injectStyle({ css: TooltipStyles, type: 'base' })\n    }\n  }) as EventListener)\n}\n\nexport { TooltipController as Tooltip } from './components/TooltipController'\nexport { TooltipProvider, TooltipWrapper } from './components/TooltipProvider'\nexport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  ITooltipController as ITooltip,\n  ITooltipWrapper,\n  IPosition,\n  Middleware,\n  TooltipRefProps,\n}\n\nexport { removeStyle } from './utils/handle-style'\n"],"names":["REACT_TOOLTIP_CORE_STYLES_ID","REACT_TOOLTIP_BASE_STYLES_ID","injected","core","base","injectStyle","css","id","type","ref","document","process","_a","env","REACT_TOOLTIP_DISABLE_CORE_STYLES","_b","REACT_TOOLTIP_DISABLE_BASE_STYLES","insertAt","getElementById","console","warn","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","removeStyle","tagName","remove","debounce","func","wait","immediate","timeout","args","later","apply","this","setTimeout","clearTimeout","DEFAULT_TOOLTIP_ID","DEFAULT_CONTEXT_DATA","anchorRefs","Set","activeAnchor","current","attach","detach","setActiveAnchor","TooltipContext","createContext","getTooltipData","TooltipProvider","children","anchorRefMap","setAnchorRefMap","useState","activeAnchorMap","setActiveAnchorMap","tooltipId","refs","oldMap","tooltipRefs","forEach","add","delete","useCallback","context","useMemo","React","Provider","value","useTooltip","useContext","TooltipWrapper","className","place","content","html","variant","offset","wrapper","events","positionStrategy","delayShow","delayHide","anchorRef","useRef","useEffect","classNames","useIsomorphicLayoutEffect","window","useLayoutEffect","isScrollable","node","HTMLElement","SVGElement","getComputedStyle","some","propertyName","getPropertyValue","getScrollParent","currentParent","parentElement","scrollingElement","documentElement","computeTooltipPosition","async","elementReference","tooltipReference","tooltipArrowReference","offsetValue","strategy","middlewares","Number","flip","fallbackAxisSideDirection","shift","padding","border","tooltipStyles","tooltipArrowStyles","middleware","push","arrow","element","computePosition","placement","then","x","y","middlewareData","styles","left","top","arrowX","arrowY","staticSide","right","bottom","split","borderSide","borderBottom","borderRight","borderWidth","match","Tooltip","forwardRef","classNameArrow","anchorId","anchorSelect","openOnClick","WrapperElement","float","hidden","noArrow","clickable","closeOnEsc","closeOnScroll","closeOnResize","openEvents","closeEvents","globalCloseEvents","imperativeModeOnly","externalStyles","position","afterShow","afterHide","contentWrapperRef","isOpen","setIsOpen","opacity","arrowColor","role","tooltipRef","tooltipArrowRef","tooltipShowDelayTimerRef","tooltipHideDelayTimerRef","missedTransitionTimerRef","actualPlacement","setActualPlacement","inlineStyles","setInlineStyles","inlineArrowStyles","setInlineArrowStyles","show","setShow","rendered","setRendered","imperativeOptions","setImperativeOptions","wasShowing","lastFloatPosition","setProviderActiveAnchor","hoveringTooltip","anchorsBySelect","setAnchorsBySelect","mounted","shouldOpenOnClick","includes","hasClickEvent","click","dblclick","mousedown","actualOpenEvents","mouseenter","focus","Object","assign","actualCloseEvents","mouseleave","blur","mouseup","actualGlobalCloseEvents","escape","scroll","resize","clickOutsideAnchor","handleShow","undefined","transitionShowDelay","time","amount","unit","cssTimeToMs","body","handleShowTooltipDelayed","delay","handleHideTooltipDelayed","handleShowTooltip","event","target","currentTarget","isConnected","handleHideTooltip","handleTooltipPosition","virtualElement","getBoundingClientRect","width","height","computedStylesData","keys","length","handleMouseMove","mouseEvent","mousePosition","clientX","clientY","handleClickOutsideAnchors","contains","querySelector","anchor","debouncedHandleShowTooltip","debouncedHandleHideTooltip","updateTooltipPosition","actualPosition","elementRefs","anchorById","handleScrollResize","anchorScrollParent","tooltipScrollParent","addEventListener","updateTooltipCleanup","autoUpdate","ancestorResize","elementResize","layoutShift","handleEsc","key","enabledEvents","handleClickOpenTooltipAnchor","handleClickCloseTooltipAnchor","regularEvents","clickEvents","entries","enabled","listener","handleMouseEnterTooltip","handleMouseLeaveTooltip","removeEventListener","selector","documentObserver","MutationObserver","mutationList","newAnchors","removedAnchors","mutation","attributeName","getAttribute","elements","removedNodes","filter","nodeType","matches","flatMap","querySelectorAll","call","addedNodes","anchors","observe","childList","subtree","attributes","attributeFilter","disconnect","contentObserver","ResizeObserver","Array","from","actualContent","canShow","useImperativeHandle","open","options","close","Boolean","coreStyles","onTransitionEnd","background","TooltipContent","dangerouslySetInnerHTML","__html","cssSupports","property","CSS","supports","TooltipController","render","disableStyleInjection","tooltipContent","setTooltipContent","tooltipHtml","setTooltipHtml","tooltipPlace","setTooltipPlace","tooltipVariant","setTooltipVariant","tooltipOffset","setTooltipOffset","tooltipDelayShow","setTooltipDelayShow","tooltipDelayHide","setTooltipDelayHide","tooltipFloat","setTooltipFloat","tooltipHidden","setTooltipHidden","tooltipWrapper","setTooltipWrapper","tooltipEvents","setTooltipEvents","tooltipPositionStrategy","setTooltipPositionStrategy","tooltipClassName","setTooltipClassName","styleInjectionRef","providerActiveAnchor","getDataAttributesFromAnchorElement","getAttributeNames","reduce","acc","name","startsWith","replace","applyAllDataAttributesFromAnchorElement","dataAttributes","handleDataAttributes","parsed","values","handler","dispatchEvent","CustomEvent","detail","disableCore","disableBase","size","anchorElement","observer","observerConfig","renderedContent","props"],"mappings":"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"}